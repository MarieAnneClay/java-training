package persistence.daoUtil;

import java.sql.ResultSet;
import java.sql.SQLException;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;

public class DAOUtilitaire {

    /**
     * Initialize the prepared request.
     * 
     * @throws SQLException
     *             show the SQL error of the request
     * @param connexion
     *            connexion to the database
     * @param sql
     *            the SQL request
     * @param returnGeneratedKeys
     *            the key generated by the base
     * @param objets
     *            parameters for the SQL request if needed
     * @return PreparedStatement
     */
    public static PreparedStatement initialisationRequetePreparee(Connection connexion, String sql,
            boolean returnGeneratedKeys, Object... objets) throws SQLException {
        PreparedStatement preparedStatement = (PreparedStatement) connexion.prepareStatement(sql,
                returnGeneratedKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS);
        for (int i = 0; i < objets.length; i++) {
            preparedStatement.setObject(i + 1, objets[i]);
        }
        return preparedStatement;
    }

    /**
     * Silenced close of the resultset.
     * 
     * @param resultSet
     *            ResultSet to close
     */
    public static void fermetureSilencieuse(ResultSet resultSet) {
        if (resultSet != null) {
            try {
                resultSet.close();
            } catch (SQLException e) {
                System.out.println("Échec de la fermeture du ResultSet : " + e.getMessage());
            }
        }
    }

    /**
     * Silenced close of the statement.
     * 
     * @param statement
     *            Statement to close
     */
    public static void fermetureSilencieuse(Statement statement) {
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException e) {
                System.out.println("Échec de la fermeture du Statement : " + e.getMessage());
            }
        }
    }

    /**
     * Silenced close of the connexion.
     * 
     * @param connexion
     *            Connection to close
     */
    public static void fermetureSilencieuse(Connection connexion) {
        if (connexion != null) {
            try {
                connexion.close();
            } catch (SQLException e) {
                System.out.println("Échec de la fermeture de la connexion : " + e.getMessage());
            }
        }
    }

    /**
     * Silenced close of the connexion and statement.
     * 
     * @param statement
     *            Statement to close
     * @param connexion
     *            Connection to close
     */
    public static void fermeturesSilencieuses(Statement statement, Connection connexion) {
        fermetureSilencieuse(statement);
        fermetureSilencieuse(connexion);
    }

    /**
     * Silenced close of the resultSet, connexion and statement.
     * 
     * @param resultSet
     *            ResultSet to close
     * @param statement
     *            Statement to close
     * @param connexion
     *            Connection to close
     */
    public static void fermeturesSilencieuses(ResultSet resultSet, Statement statement, Connection connexion) {
        fermetureSilencieuse(resultSet);
        fermetureSilencieuse(statement);
        fermetureSilencieuse(connexion);
    }
}
