pipeline {
    agent any
    
    // variables
    environment {
        gitUrl = 'https://github.com/MarieAnneClay/java-training.git'
        gitBranch = 'master'
        dockerHubUrl = 'https://hub.docker.com/r/maclay/'
        mavenName = 'javaTraining'
        mavenRepo = '/home/ebiz/git/java-training/javaTraining/'.
        mavenUser = 'maclay'
        mavenImage = 'maven'
        mysqlTestImage = 'mysqltest'
        tomcatImage = 'tomcat'
        tomcatPort = '8080'
        mysqlProdImage = 'mysqlprod'
        mysqlPassword = 'ebiz'
        mysqlPort = '3306'
        
	}
	
	/*
	triggers {
        cron '@daily'
    }
    stage('testing') {
            steps {
                // use a different repo to get the test suite:
                git 'https://github.com/jenkinsci/acceptance-test-harness'

                // we unstash our stuff from before (because this may be a different node)
                unstash 'stuff'

                sh 'run-test-suite.sh'    

            }

        }
	*/
    
    // when a developper commit and push to the branch master, github trigger jenkins
    triggers{
    	git url: "${gitUrl}", branch "${gitBranch}"
    }
    
    stages {
    	// Build and test on mysqlTest 
        stage('Build') {
	        agent{	        	
		        docker.withRegistry("${dockerHubUrl}") {	
			        // docker jdk+maven
			        docker.image("${mavenImage}").inside {
						sh 'docker run -it --rm --name ${mavenName} -v "$PWD":${mavenRepo} -w ${mavenRepo} ${mavenUser}/${mavenImage} mvn clean install'
			        }
			        
			         // docker mysqlTest
			         docker.image("${mysqlTestImage}").inside {
			            sh 'docker run -d --name ${mysqlTestImage} -e MYSQL_PASSWORD=${mysqlPassword} -p ${mysqlPort}:${mysqlPort} ${mavenUser}/${mysqlTestImage}'
			        }
    			}     
	        }
            steps {
            	// properties([pipelineTriggers([[$class: 'GitHubPushTrigger'], pollSCM('H/15 * * * *')])])
                mvn 'clean install'
            }
            
            // if test ok publier les images on docker hub
            succes {
        	docker.withRegistry("${dockerHubUrl}", 'credentials-id') {
				/* Push the container to the custom Registry */
		        docker.build("${mavenImage}").push()
		        docker.build("${tomcatImage}").push()
		        docker.build("${mysqlProdImage}").push()
		    }
        
        }
        
        // launch production when the push is detect on docker hub
	    triggers{
	    	docker url: "${dockerHubUrl}"
	    }
        
        // deploy with tomcat and mysqlProd
        stage('Deploy') {
        	agent{	        
		        docker.withRegistry("${dockerHubUrl}") {	
			        // docker tomcat
			        docker.image("${tomcatImage}").inside {
						sh 'docker run -d -p ${tomcatPort}:${tomcatPort} ${mavenUser}/${tomcatImage}'
			        }
		        
			         // docker mysqlProd  
			         docker.image('mysqlprod').inside {
						sh 'docker run -d --name ${mysqlProdImage} -e MYSQL_PASSWORD=${mysqlPassword} -p ${mysqlPort}:${mysqlPort} ${mavenUser}/${mysqlProdImage}'
			        }
    			}     
	        }
	        
            steps {
                mvn 'clean deploy'
            }
        }
    }
    
    post {
        always {
        	sh "docker stop ${mavenName}" 
        	sh "docker rm ${mavenName}"
        	
        	sh "docker stop ${mysqlTestImage}" 
        	sh "docker rm ${mysqlTestImage}"
        	
        	sh "docker stop ${tomcatImage}" 
        	sh "docker rm ${tomcatImage}"
        	
        	sh "docker stop ${mysqlProdImage}" 
        	sh "docker rm ${mysqlProdImage}"
        }
        
        failure {
            mail to: maclay@e-biz.fr, subject: 'The Pipeline failed :('
        }
    }
}
